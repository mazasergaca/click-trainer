{"version":3,"file":"static/js/532.98a417f8.chunk.js","mappings":"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","sources":["Page/Menu/Menu.styles.js","Page/Menu/Menu.jsx","components/Container/Container.styles.js","components/Container/Container.jsx","../node_modules/use-sound/src/index.ts","../node_modules/use-sound/src/use-on-mount.ts"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Wrapper = styled.ul`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 13px 35px;\r\n\r\n  font-family: \"Press Start 2P\", cursive;\r\n  font-size: 20px;\r\n  text-align: center;\r\n\r\n  border-radius: 20px;\r\n  border: 1px solid #fff;\r\n  background: transparent;\r\n  color: #fff;\r\n  cursor: pointer;\r\n\r\n  transition: border-color 0.25s;\r\n\r\n  &:hover {\r\n    border-color: rgb(234, 72, 132);\r\n  }\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useSound from \"use-sound\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { resetToken } from \"../../redux/user/user-slice\";\r\nimport userSelectors from \"../../redux/user/user-selectors\";\r\nimport pressSound from \"../../assets/sounds/start.mp3\";\r\nimport Container from \"../../components/Container/Container\";\r\nimport { Wrapper, Button } from \"./Menu.styles\";\r\n\r\nconst Menu = () => {\r\n  const volume = useSelector(userSelectors.getVolume);\r\n\r\n  const [playSound] = useSound(pressSound, { volume });\r\n\r\n  const navigation = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = (path) => {\r\n    playSound();\r\n    navigation(path);\r\n  };\r\n\r\n  const onClickLogout = () => {\r\n    playSound();\r\n    dispatch(resetToken());\r\n  };\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <Button onClick={() => handleClick(\"/game\")}>New game</Button>\r\n        <Button onClick={() => handleClick(\"/market\")}>Market</Button>\r\n        <Button onClick={() => handleClick(\"/achievement\")}>Achievement</Button>\r\n        <Button onClick={onClickLogout}>Logout</Button>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  min-width: 320px;\r\n  min-height: 100vh;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 738px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    width: 1250px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"./Container.styles\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <Wrapper>{children}</Wrapper>;\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["Wrapper","styled","Button","volume","useSelector","userSelectors","useSound","pressSound","playSound","navigation","useNavigate","dispatch","useDispatch","handleClick","path","Container","onClick","resetToken","children","src","callback","id","_ref2$volume","playbackRate","_ref2$playbackRate","soundEnabled","_ref2$soundEnabled","interrupt","_ref2$interrupt","onload","delegated","HowlConstructor","React","isMounted","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","Array","isArray","rate","JSON","stringify","play","options","forceSoundEnabled","stop","pause"],"sourceRoot":""}