{"version":3,"file":"static/js/486.c63e677d.chunk.js","mappings":"yQAAaA,EAA6B,SAACC,GAEzC,IADA,IAAIC,EAAQ,KACHC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IACjC,IAAKF,EAAOE,GAAGE,SAAU,OAAgBF,EAG3C,OAAOD,G,2GCHII,EAAUC,EAAAA,GAAAA,IAAH,mMAWPC,EAAeD,EAAAA,GAAAA,IAAH,kEAKZE,EAAQF,EAAAA,GAAAA,GAAH,uEAKLG,EAAQH,EAAAA,GAAAA,IAAH,mTAYG,SAACI,GAAD,OAAWA,EAAMC,UAIzBC,EAAYN,EAAAA,GAAAA,KAAH,8NAcTO,EAAOP,EAAAA,GAAAA,GAAH,6CAIJQ,EAAOR,EAAAA,GAAAA,GAAH,8JAUJS,EAAOT,EAAAA,GAAAA,KAAH,iHAMJU,EAAQV,EAAAA,GAAAA,KAAH,wHAOLW,EAASX,EAAAA,GAAAA,OAAH,odA0BNY,GAAaZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAPb,CAAH,yT,UCSvB,EA1FoB,WAClB,IC3B4Cc,EAAWC,ED2BjDC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,WAC3B,GAA+BC,EAAAA,EAAAA,GAASC,EAAkB,CAAEJ,OAAAA,IAArDK,GAAP,eACA,GAAoBF,EAAAA,EAAAA,GAASG,EAAY,CAAEN,OAAAA,IAApCO,GAAP,eAEMC,GAAkBP,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,oBAEpC,GAAkCO,EAAAA,EAAAA,MAApBC,EAAd,EAAQC,KAAYC,EAApB,EAAoBA,UAIdC,IAFWC,EAAAA,EAAAA,MCnC2BhB,EDsC1CU,ECtCqDT,EDqCS,OAE9DW,QAF8D,IAE9DA,OAF8D,EAE9DA,EAAMK,kBCtCDC,KAAKC,MAAO,IAAMnB,EAAaC,GAAW,KDqDjD,OACE,SAACmB,EAAA,EAAD,WACIN,IACA,UAAC7B,EAAD,YACE,SAACa,EAAD,CAAYuB,GAAG,QAAQC,QAASb,EAAhC,qBAGA,SAACrB,EAAD,2BACA,SAACC,EAAD,CAAOE,OAAQwB,EAAf,UACE,UAACvB,EAAD,kBACGoB,QADH,IACGA,OADH,EACGA,EAAMK,kBADT,MAC+BP,EAD/B,IAEGK,EAFH,UAKF,SAACtB,EAAD,UACG8B,OAAOC,OAAOZ,EAAKa,cAAcC,KAAI,SAACC,EAAQ9C,GAAT,OACpC,UAACa,EAAD,YACE,SAACC,EAAD,UAAOgC,EAAOC,QACd,UAACzC,EAAD,YACE,UAACS,EAAD,WACG+B,EAAOE,MACuC,OAA9ClD,EAA2BgD,EAAO/C,UACjC,oCAGI+C,EAAO/C,OACLD,EAA2BgD,EAAO/C,SAClCiD,YAKqC,OAA9ClD,EAA2BgD,EAAO/C,SACjC,UAACiB,EAAD,CACEyB,QAAS,kBACgBK,EAAO/C,YA9ClD2B,KAgDkBuB,SACEH,EAAOE,MACPF,EAAO/C,OAAOD,EAA2BgD,EAAO/C,SAC7CiD,MAPP,UAWIF,EAAO/C,OAAOD,EAA2BgD,EAAO/C,SAC7CW,QAEL,SAAC,MAAD,CAASwC,KAAM,SAGjB,SAAC,MAAD,CAAQA,KAAM,GAAIC,MAAM,iBAlCnBL,EAAOC,kB,4EEpEnB3C,E,QAAUC,GAAAA,IAAH,qP,UCKpB,EAJkB,SAAC,GAAkB,IAAhB+C,EAAe,EAAfA,SACnB,OAAO,SAAChD,EAAD,UAAUgD,M","sources":["utils/getCurrentLevelAchievement.js","Page/Achievement/Achievement.styles.js","Page/Achievement/Achievement.jsx","utils/getAchievementPointsInPercent.js","components/Container/Container.styles.js","components/Container/Container.jsx"],"sourcesContent":["export const getCurrentLevelAchievement = (levels) => {\r\n  let index = null;\r\n  for (let i = 0; i < levels.length; i++) {\r\n    if (!levels[i].reseived) return (index = i);\r\n  }\r\n\r\n  return index;\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 600px;\r\n  }\r\n`;\r\nexport const WrapperItems = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Scale = styled.div`\r\n  position: relative;\r\n  height: 24px;\r\n  margin-top: 10px;\r\n\r\n  border-radius: 10px;\r\n  background-color: #fff;\r\n  background-image: linear-gradient(\r\n    90deg,\r\n    rgb(234, 72, 132) 0%,\r\n    rgb(234, 72, 132) 100%\r\n  );\r\n  background-size: ${(props) => props.points};\r\n  background-repeat: no-repeat;\r\n`;\r\n\r\nexport const MainScore = styled.span`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  font-size: 10px;\r\n\r\n  color: #000;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 12px;\r\n  }\r\n`;\r\nexport const List = styled.ul`\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const Name = styled.span`\r\n  font-size: 12px;\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 16px;\r\n  }\r\n`;\r\nexport const Score = styled.span`\r\n  margin-right: 30px;\r\n  @media screen and (min-width: 768px) {\r\n    margin-right: 120px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 5px 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  font-family: \"Press Start 2P\", cursive;\r\n\r\n  border: 1px solid #eee;\r\n  border-radius: 20px;\r\n  background-color: transparent;\r\n  color: #fce656;\r\n  cursor: pointer;\r\n  transition: border-color 0.25s;\r\n\r\n  &:hover {\r\n    border-color: rgb(234, 72, 132);\r\n  }\r\n\r\n  &:disabled {\r\n    border-color: #888;\r\n    color: #888;\r\n    cursor: default;\r\n  }\r\n`;\r\n\r\nexport const LinkStyled = styled(Link)`\r\n  position: absolute;\r\n  left: 20px;\r\n  top: -70px;\r\n\r\n  font-family: \"Press Start 2P\", cursive;\r\n  font-size: 32px;\r\n\r\n  border-radius: 20px;\r\n  background: transparent;\r\n  color: #fff;\r\n  cursor: pointer;\r\n\r\n  transition: color 0.25s;\r\n\r\n  &:hover {\r\n    color: rgb(234, 72, 132);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport useSound from \"use-sound\";\r\nimport { MdDone } from \"react-icons/md\";\r\nimport { BiMedal } from \"react-icons/bi\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useGetCurrentUserQuery } from \"../../redux/base-api\";\r\nimport userSelectors from \"../../redux/user/user-selectors\";\r\nimport { getAchievementPointsInPescent } from \"../../utils/getAchievementPointsInPercent\";\r\nimport { getCurrentLevelAchievement } from \"../../utils/getCurrentLevelAchievement\";\r\nimport AchievementSound from \"../../assets/sounds/achievement.mp3\";\r\nimport pressSound from \"../../assets/sounds/start.mp3\";\r\nimport Container from \"../../components/Container/Container\";\r\nimport {\r\n  Button,\r\n  Item,\r\n  LinkStyled,\r\n  List,\r\n  MainScore,\r\n  Name,\r\n  Scale,\r\n  Wrapper,\r\n  WrapperItems,\r\n  Title,\r\n  Score,\r\n} from \"./Achievement.styles\";\r\n\r\nconst Achievement = () => {\r\n  const volume = useSelector(userSelectors.getVolume);\r\n  const [playAchievementSound] = useSound(AchievementSound, { volume });\r\n  const [playSound] = useSound(pressSound, { volume });\r\n\r\n  const allAchievements = useSelector(userSelectors.getAllAchievements);\r\n\r\n  const { data: user, isLoading } = useGetCurrentUserQuery();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const achievementPointsInPercent = getAchievementPointsInPescent(\r\n    allAchievements,\r\n    user?.achievementPoints\r\n  );\r\n\r\n  const handleClickAchievement = (levels, indexType) => {\r\n    playAchievementSound();\r\n    // const points = levels[getCurrentLevelAchievement(levels)].points;\r\n    // dispatch(\r\n    //   changeReseived({\r\n    //     indexType,\r\n    //     indexLevel: getCurrentLevelAchievement(levels),\r\n    //   })\r\n    // );\r\n    // dispatch(incrementAchievementPoints(points));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {!isLoading && (\r\n        <Wrapper>\r\n          <LinkStyled to=\"/menu\" onClick={playSound}>\r\n            ·êä\r\n          </LinkStyled>\r\n          <Title>Achievement</Title>\r\n          <Scale points={achievementPointsInPercent}>\r\n            <MainScore>\r\n              {user?.achievementPoints} / {allAchievements}(\r\n              {achievementPointsInPercent})\r\n            </MainScore>\r\n          </Scale>\r\n          <List>\r\n            {Object.values(user.achievements).map((achive, index) => (\r\n              <Item key={achive.name}>\r\n                <Name>{achive.name}</Name>\r\n                <WrapperItems>\r\n                  <Score>\r\n                    {achive.value}\r\n                    {getCurrentLevelAchievement(achive.levels) !== null && (\r\n                      <>\r\n                        /\r\n                        {\r\n                          achive.levels[\r\n                            getCurrentLevelAchievement(achive.levels)\r\n                          ].value\r\n                        }\r\n                      </>\r\n                    )}\r\n                  </Score>\r\n                  {getCurrentLevelAchievement(achive.levels) !== null ? (\r\n                    <Button\r\n                      onClick={() =>\r\n                        handleClickAchievement(achive.levels, index)\r\n                      }\r\n                      disabled={\r\n                        achive.value <\r\n                        achive.levels[getCurrentLevelAchievement(achive.levels)]\r\n                          .value\r\n                      }\r\n                    >\r\n                      {\r\n                        achive.levels[getCurrentLevelAchievement(achive.levels)]\r\n                          .points\r\n                      }\r\n                      <BiMedal size={24} />\r\n                    </Button>\r\n                  ) : (\r\n                    <MdDone size={24} color=\"#70fa7a\" />\r\n                  )}\r\n                </WrapperItems>\r\n              </Item>\r\n            ))}\r\n          </List>\r\n        </Wrapper>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Achievement;\r\n","export const getAchievementPointsInPescent = (allPoints, inStock) => {\r\n  return Math.round((100 / allPoints) * inStock) + \"%\";\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  min-width: 320px;\r\n  min-height: 100vh;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 738px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    width: 1250px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"./Container.styles\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <Wrapper>{children}</Wrapper>;\r\n};\r\n\r\nexport default Container;\r\n"],"names":["getCurrentLevelAchievement","levels","index","i","length","reseived","Wrapper","styled","WrapperItems","Title","Scale","props","points","MainScore","List","Item","Name","Score","Button","LinkStyled","Link","allPoints","inStock","volume","useSelector","userSelectors","useSound","AchievementSound","playAchievementSound","pressSound","playSound","allAchievements","useGetCurrentUserQuery","user","data","isLoading","achievementPointsInPercent","useDispatch","achievementPoints","Math","round","Container","to","onClick","Object","values","achievements","map","achive","name","value","disabled","size","color","children"],"sourceRoot":""}